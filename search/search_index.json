{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Brian's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Brian Liu</li> <li>Reviewer: Yuanyao Lin</li> </ul>"},{"location":"tutorials/rust-setup/#in-this-tutorial-you-will-learn-how-to-set-up-a-dev-container-for-your-rust-projects","title":"In this tutorial, you will learn how to set up a dev container for your Rust projects!","text":""},{"location":"tutorials/rust-setup/#first-things-first-the-prerequisites","title":"First Things First, the Prerequisites","text":"<ol> <li>Install Virtual Studio Code (VS Code).</li> <li>Install Git for your operating system.</li> <li>Create a GitHub Account.</li> <li>Install Docker. This will provide our dev container.</li> <li>Learn some Command-Line-Interface. Read some of the Learn a CLI text.</li> </ol>"},{"location":"tutorials/rust-setup/#once-youve-done-the-above-things-we-move-on-to-setting-up-your-project","title":"Once you've done the above things, we move on to setting up your project","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-repository","title":"Step 1. Create a Repository","text":"<p>(A) Open Terminal/Command Prompt (B) Run the following the commands <pre><code>mkdir rust-project\ncd rust-project\ngit init\n</code></pre></p> <p>What do these commands do?</p> <p><code>mkdir rust-project</code> creates a new directory named <code>rust-project</code>. <code>cd rust-project</code> makes <code>rust-project</code> the current working directory. <code>git init</code> initializes a new git repository</p> <p>(C) Create the README file by running the following commands and make your first commit   <pre><code>echo \"# Rust Project\" &gt;&gt; README.md\necho \"[Link to Tutorial](https://brianx426.github.io/comp423-course-notes/tutorials/rust-setup/)\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Initial commit: added README.md\"\n</code></pre></p> <p>Command explanations</p> <p>The <code>echo</code> commands appends the text after echo into the README file. After initializing our README file, we want to make our initial commit to GitHub using the <code>git add</code> and <code>git commit</code> commands.</p>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2. Create a Remote Repository on GitHub","text":"<p>(A) Log in to your GitHub account and navigate to the Create a New Repository page. (B) Fill in the details as follows:</p> <ul> <li>Repository Name: <code>rust-project</code></li> <li>Description: \"Hello World using Rust\"</li> <li>Visibility: Public</li> </ul> <p>(C) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(D) Click Create Repository.</p>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-on-github","title":"Step 3: Link your Local Repository on Github","text":"<p>(A) Add the GitHub repository as a remote:</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-project.git\n</code></pre> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>(B) Make <code>main</code> the default branch name. Run <code>git branch</code>, if you do not see <code>main</code>, run the following: <code>git branch -M main</code></p> <p>Why do we do this?</p> <p>Old versions of git use the name <code>master</code> for the primary branch, but nowadays, <code>main</code> is used as the standard primary branch name.</p> <p>(C) Push your local commits to the GitHub Repository: <pre><code>git push --set-upstream origin main\n</code></pre></p> <p>(D) Now, refresh your GitHub Repository on your web browser and you should see the same commit that you just made has been pushed to remote.</p>"},{"location":"tutorials/rust-setup/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":""},{"location":"tutorials/rust-setup/#step-1-add-development-container-configuration","title":"Step 1. Add Development Container Configuration","text":"<ol> <li>In VS Code, open the <code>rust-project</code> directory. You can do this via: File &gt; Open Foler.</li> <li>Install the Dev Containers extension for VS Code.</li> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory:</li> </ol> <pre><code>.devcontainer/devcontainer.json\n</code></pre> <p>The <code>devcontainer.json</code> file defines the configuration for your development environment. We specify the following:</p> <ul> <li><code>name</code>: A descriptive name for your container</li> <li><code>image</code>: The Docker image to use, in this case, the latest version of a Rust environment. You can find a collection of base images maintained by Microsoft here.</li> <li><code>customizations</code>: Adds useful configurations to VS Code, like installing the Rust extension.</li> <li><code>postCreateCommand</code>: A command to run after the container is created. In our case, it will just run: <code>rustc --version</code> to check the version of rust we are using.</li> </ul> <p>4. In the <code>devcontainers.json</code> file, add the following:</p> <pre><code>{\n  \"name\": \"Rust Project\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  },\n  \"postCreateCommand\": \"rustc --version\"\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-reopen-the-project-in-a-dev-container","title":"Step 2. Reopen the Project in a Dev Container","text":"<ol> <li>Press Ctrl(Cmd for mac) + Shift + p</li> <li>Type and Select the option: \"Dev Containers: Reopen in Container\"</li> <li>Wait until the image is downloaded</li> <li>Once the image downloads, you can move on to creating the project!</li> <li>In the terminal run <code>rustc --version</code>. You should see something along the lines of:</li> </ol> <pre><code>rustc 1.83.0 (90b35a623 2024-11-26)\n</code></pre>"},{"location":"tutorials/rust-setup/#creating-the-project","title":"Creating the Project","text":"<p>You made it! We are in the home stretch of this tutorial now! Just a few more steps to go!</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-new-rust-file-by-doing-the-following","title":"Step 1. Create a new rust file by doing the following","text":"<p>(A) Open a new terminal in VS Code and run the following:</p> <pre><code>cargo new hello-comp423 --vcs none\ncd hello-comp423\n</code></pre> <p>I've ran these commands before!!!</p> <p>Recall towards the beginning of this tutorial. We did something similar! The commands we just ran created a new directory called <code>hello-comp423</code> without initializing a VCS and made our current working directory <code>hello-comp423</code></p> <p>(B) Navigate to the <code>src/main.rs</code> file and open it. (C) Modify the main function to print \"Hello COMP423\" instead of \"Hello, World!\". The result should look like this:</p> <pre><code>fn main() {\n  println!(\"Hello COMP423\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-running-your-program","title":"Step 2. Running your program","text":"<p>There are two ways to run your program.</p> <ul> <li> <p>The first way involves using <code>cargo build</code>. <code>cargo build</code> will compile your rust program and proide you with an executable file for you to run yourself. Think of this as using <code>gcc</code> to compile a C program. Both methods compile your program, but you have to manually run the executable file. </p> </li> <li> <p>The second way uses <code>cargo run</code>. This command compiles and executes your program all in one step. </p> </li> </ul>"},{"location":"tutorials/rust-setup/#to-run-your-program-using-cargo-build-do-the-following","title":"To run your program using <code>cargo build</code>, do the following:","text":"<ol> <li> <p>In the terminal, run <code>cargo build</code>. You should see that a new directory called <code>target</code>, along with these files: <code>Cargo.lock</code> and <code>Cargo.toml</code></p> </li> <li> <p>Run <code>./target/debug/hello-comp423</code> to print \"Hello COMP423\" in the terminal.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#to-run-your-program-using-cargo-run-do-the-following","title":"To run your program using <code>cargo run</code>, do the following:","text":"<ol> <li>Run <code>cargo run</code> in the terminal to print \"Hello COMP423\"</li> </ol>"},{"location":"tutorials/rust-setup/#once-you-see-that-hello-comp423-has-been-printed-in-the-terminal-youve-finished-this-tutorial","title":"Once you see that \"Hello COMP423\" has been printed in the terminal, you've finished this tutorial","text":"<p>To save your work, be sure to run the following in the terminal:  <pre><code>git add .\ngit commit -m \"followed Rust tutorial and printed Hello COMP423\"\ngit push -u origin main\n</code></pre></p> <p>What does <code>.</code> mean?</p> <p><code>.</code> refers to the current workiing directory the terminal's shell process is in.</p>"},{"location":"tutorials/rust-setup/#congratulations-you-have-reached-the-end-of-this-tutorial","title":"Congratulations! You have reached the end of this tutorial.","text":""},{"location":"tutorials/rust-setup/#you-have-successfully-done-the-following","title":"You have successfully done the following:","text":"<ul> <li>Create a Rust project using the terminal and VS Code</li> <li>Set up a dev container for Rust</li> <li>Configured your development environment</li> <li>Run a Rust program</li> </ul> <p>Many thanks to Kris Jordan's Starting a Static Website Project with MkDocs as most of this tutorial was inspired by it!</p>"}]}